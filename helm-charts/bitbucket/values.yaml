# -- The initial number of pods that should be started at deployment of Bitbucket.
replicaCount: 1

image:
  repository: atlassian/bitbucket-server
  pullPolicy: IfNotPresent
  # -- The docker image tag to be used. Defaults to the Chart appVersion.
  tag: ""

serviceAccount:
  # -- Specifies the name of the ServiceAccount to be used by the pods.
  # If not specified, but the the "serviceAccount.create" flag is set, then the ServiceAccount name will be auto-generated,
  # otherwise the 'default' ServiceAccount will be used.
  name:
  # -- true if a ServiceAccount should be created, or false if it already exists
  create: true
  # -- The list of image pull secrets that should be added to the created ServiceAccount
  imagePullSecrets: []
  clusterRole:
    # -- Specifies the name of the ClusterRole that will be created if the "serviceAccount.clusterRole.create" flag is set.
    # If not specified, a name will be auto-generated.
    name:
    # -- true if a ClusterRole should be created, or false if it already exists
    create: true
  clusterRoleBinding:
    # -- Specifies the name of the ClusterRoleBinding that will be created if the "serviceAccount.clusterRoleBinding.create" flag is set
    # If not specified, a name will be auto-generated.
    name:
    # -- true if a ClusterRoleBinding should be created, or false if it already exists
    create: true

database:
  # -- The JDBC URL of the database to be used by Bitbucket, e.g. jdbc:postgresql://host:port/database
  # If not specified, then it will need to be provided via browser during initial startup.
  url:
  # -- The Java class name of the JDBC driver to be used, e.g. org.postgresql.Driver
  # If not specified, then it will need to be provided via browser during initial startup.
  driver:
  credentials:
    # -- The name of the Kubernetes Secret that contains the database login credentials.
    # If specified, then the credentials will be automatically populated during Bitbucket setup.
    # Otherwise, they will need to be provided via the browser after initial startup.
    secretName:
    # -- The key in the Secret used to store the database login username
    usernameSecretKey: username
    # -- The key in the Secret used to store the database login password
    passwordSecretKey: password

bitbucket:
  service:
    # -- The port on which the Jira Kubernetes service will listen
    port: 80
    # -- The type of Kubernetes service to use for Jira
    type: ClusterIP
  # -- Enable or disable security context in StatefulSet template spec. Enabled by default with UID 2003.
  # -- Disable when deploying to OpenShift, unless anyuid policy is attached to service account
  securityContext:
    enabled: true
    # -- The GID used by the Bitbucket docker image
    gid: "2003"
  ports:
    http: 7990
    ssh: 7999
    hazelcast: 5701

  license:
    # -- The name of the Kubernetes Secret which contains the Bitbucket license key.
    # If specified, then the license will be automatically populated during Bitbucket setup.
    # Otherwise, it will need to be provided via the browser after initial startup.
    secretName:
    # -- The key in the Kubernetes Secret which contains the Bitbucket license key
    secretKey: license-key

  sysadminCredentials:
    # -- The name of the Kubernetes Secret which contains the Bitbucket sysadmin credentials
    # If specified, then these will be automatically populated during Bitbucket setup.
    # Otherwise, they will need to be provided via the browser after initial startup.
    secretName:
    # -- The key in the Kubernetes Secret which contains the sysadmin username
    usernameSecretKey: username
    # -- The key in the Kubernetes Secret which contains the sysadmin password
    passwordSecretKey: password
    # -- The key in the Kubernetes Secret which contains the sysadmin display name
    displayNameSecretKey: displayName
    # -- The key in the Kubernetes Secret which contains the sysadmin email address
    emailAddressSecretKey: emailAddress

  clustering:
    # -- Set to true if Data Center clustering should be enabled
    # This will automatically configure cluster peer discovery between cluster nodes.
    enabled: false

  elasticSearch:
    # -- The base URL of the external ElasticSearch instance to be used.
    # If this is defined, then Bitbucket will disable its internal ElasticSearch instance.
    baseUrl:
    credentials:
      # -- The name of the Kubernetes Secret that contains the ElasticSearch credentials.
      secretName:
      # -- The key in the the Kubernetes Secret that contains the ElasticSearch username.
      usernameSecreyKey: username
      # -- The key in the the Kubernetes Secret that contains the ElasticSearch password.
      passwordSecretKey: password

  resources:
    jvm:
      # -- The maximum amount of heap memory that will be used by the Bitbucket JVM. The same value will be used by the ElasticSearch JVM.
      maxHeap: "1g"
      # -- The minimum amount of heap memory that will be used by the Bitbucket JVM. The same value will be used by the ElasticSearch JVM.
      minHeap: "1g"

    # -- Specifies the standard Kubernetes resource requests and/or limits for the Bitbucket container.
    # It is important that if the memory resources are specified here, they must allow for the size of the Bitbucket JVM.
    # That means the maximum heap size, the reserved code cache size, plus other JVM overheads, must be accommodated.
    # Allowing for (maxHeap+codeCache)*1.5 would be an example.
    container: {}
    #  limits:
    #    cpu: "4"
    #    memory: "2G"
    #  requests:
    #    cpu: "4"
    #    memory: "2G"

  # -- Specifies a list of additional arguments that can be passed to the Bitbucket JVM, e.g. system properties
  additionalJvmArgs:
  #    - -Dfoo=bar
  #    - -Dfruit=lemon

  # -- Specifies a list of additional Java libraries that should be added to the Bitbucket container.
  # Each item in the list should specify the name of the volume which contain the library, as well as the name of the
  # library file within that volume's root directory. Optionally, a subDirectory field can be included to specify which
  # directory in the volume contains the library file.
  additionalLibraries: []
  #  - volumeName:
  #    subDirectory:
  #    fileName:

  # -- Specifies a list of additional Bitbucket plugins that should be added to the Bitbucket container.
  # These are specified in the same manner as the additionalLibraries field, but the files will be loaded
  # as bundled plugins rather than as libraries.
  additionalBundledPlugins: []
  #  - volumeName:
  #    subDirectory:
  #    fileName:

  # -- Defines any additional volumes mounts for the Bitbucket container.
  # These can refer to existing volumes, or new volumes can be defined in volumes.additional.
  additionalVolumeMounts: []

  # -- Defines any additional environment variables to be passed to the Bitbucket container.
  # See https://hub.docker.com/r/atlassian/bitbucket-server for supported variables.
  additionalEnvironmentVariables: []

ingress:
  # -- True if an Ingress should be created.
  create: false
  # -- True if the created Ingress is to use the Kubernetes ingress-nginx controller.
  # This will populate the Ingress with annotations for that controller.
  # Set to false if a different controller is to be used, in which case the annotations need to be specified.
  nginx: true
  # -- The fully-qualified hostname of the Ingress.
  host:
  # -- The custom annotations that should be applied to the Ingress.
  annotations: {}
  # -- True if the browser communicates with the application over HTTPS.
  https: true
  # -- Secret that contains a TLS private key and certificate.
  # Optional if Ingress Controller is configured to use one secret for all ingresses
  tlsSecretName:
  # -- Used to specify a custom port number for the ingress.
  port:

fluentd:
  # -- True if the fluentd sidecar should be added to each pod
  enabled: false
  # -- The name of the image containing the fluentd sidecar
  imageName: fluent/fluentd-kubernetes-daemonset:v1.11.5-debian-elasticsearch7-1.2
  elasticsearch:
    # -- The hostname of the Elasticsearch service that fluentd should send logs to.
    hostname:

# -- Specify custom annotations to be added to all Bitbucket pods
podAnnotations: {}
#  "name": "value"

volumes:
  localHome:
    persistentVolumeClaim:
      # -- If true, then a PersistentVolumeClaim will be created for each local-home volume.
      create: true
      # -- Specifies the name of the storage class that should be used for the local-home volume claim.
      storageClassName: local-path
      # -- Specifies the standard Kubernetes resource requests and/or limits for the local-home volume claims.
      resources:
        requests:
          storage: 1Gi
    # -- When persistentVolumeClaim.create is false, then this value can be used to define a standard Kubernetes
    # volume which will be used for the local-home volumes. If not defined, then defaults to an emptyDir volume.
    customVolume: {}
    mountPath: "/var/atlassian/application-data/bitbucket"
  sharedHome:
    persistentVolume:
      # -- If true, then a PersistentVolume will be created for the shared-home volume.
      create: true
      # -- Addtional options used when mounting the volume
      mountOptions: []
      #nfs:
        # -- The address of the NFS server. It needs to be resolveable by the kubelet, so consider using an IP address.
        #  server: ""
        # -- Specifies the path exported by the NFS server, used in the mount command
        # path: ""
    persistentVolumeClaim:
      # -- If true, then a PersistentVolumeClaim will be created for the shared-home volume.
      create: true
      # -- Specifies the name of the storage class that should be used for the shared-home volume claim.
      storageClassName: local-path
      # -- Specifies the name of the persistent volume to claim
      volumeName:
      # -- Specifies the standard Kubernetes resource requests and/or limits for the shared-home volume claims.
      resources:
        requests:
          storage: 1Gi
    # -- When persistentVolumeClaim.create is false, then this value can be used to define a standard Kubernetes
    # volume which will be used for the shared-home volume. If not defined, then defaults to an emptyDir (i.e. unshared) volume.
    customVolume: {}
    # -- Specifies the path in the Bitbucket container to which the shared-home volume will be mounted.
    mountPath: "/var/atlassian/application-data/shared-home"
    # -- Specifies the sub-directory of the shared-home volume which will be mounted in to the Bitbucket container.
    subPath:
    nfsPermissionFixer:
      # -- If enabled, this will alter the shared-home volume's root directory so that Bitbucket can write to it.
      # This is a workaround for a Kubernetes bug affecting NFS volumes: https://github.com/kubernetes/examples/issues/260
      enabled: false
      # -- The path in the initContainer where the shared-home volume will be mounted
      mountPath: /shared-home
      # -- By default, the fixer will change the group ownership of the volume's root directory to match the Bitbucket
      # container's GID (2003), and then ensures the directory is group-writeable. If this is not the desired behaviour,
      # command used can be specified here.
      command:
  # -- Defines additional volumes that should be applied to all Bitbucket pods.
  # Note that this will not create any corresponding volume mounts;
  # those needs to be defined in bitbucket.additionalVolumeMounts
  additional: []

# -- Standard Kubernetes node-selectors that will be applied to all Bitbucket pods
nodeSelector: {}

# -- Standard Kubernetes tolerations that will be applied to all Bitbucket pods
tolerations: []

# -- Standard Kubernetes affinities that will be applied to all Bitbucket pods
affinity: {}

# -- Additional container definitions that will be added to all Bitbucket pods
additionalContainers: []

# -- Additional initContainer definitions that will be added to all Bitbucket pods
additionalInitContainers: []

# -- Additional labels that should be applied to all resources
additionalLabels: {}
